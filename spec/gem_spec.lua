local Gem = require("src.entities.gem")

describe("Gem", function()
    describe("Regular Gems", function()
        it("should create a gem with a valid color", function()
            local gem = Gem.new({type = "regular", color = "red"})
            assert.are.equal("red", gem:getColor())
            assert.are.equal("regular", gem:getType())
        end)

        it("should only accept valid colors for regular gems", function()
            local validColors = {"red", "blue", "green", "yellow", "purple"}
            for _, color in ipairs(validColors) do
                local gem = Gem.new({type = "regular", color = color})
                assert.are.equal(color, gem:getColor())
            end
        end)

        it("should throw an error when created with invalid color", function()
            assert.has_error(function()
                Gem.new({type = "regular", color = "invalid_color"})
            end, "Invalid color: invalid_color")
        end)
    end)

    describe("Special Items", function()
        it("should create a TNT", function()
            local gem = Gem.new({type = "tnt"})
            assert.are.equal("tnt", gem:getType())
            assert.is_nil(gem:getColor())
        end)

        it("should create a Fan", function()
            local gem = Gem.new({type = "fan", direction = "horizontal"})
            assert.are.equal("fan", gem:getType())
            assert.are.equal("horizontal", gem:getDirection())
        end)

        it("should create a Drill", function()
            local gem = Gem.new({type = "drill", direction = "vertical"})
            assert.are.equal("drill", gem:getType())
            assert.are.equal("vertical", gem:getDirection())
        end)

        it("should create a Rainbow gem", function()
            local gem = Gem.new({type = "rainbow"})
            assert.are.equal("rainbow", gem:getType())
            assert.is_true(gem:isMultiColor())
        end)

        it("should throw error for invalid special item type", function()
            assert.has_error(function()
                Gem.new({type = "invalid_type"})
            end, "Invalid gem type: invalid_type")
        end)
    end)

    describe("Common Functionality", function()
        it("should have a position when placed on board", function()
            local gem = Gem.new({type = "regular", color = "red"})
            gem:setPosition(1, 2)
            local x, y = gem:getPosition()
            assert.are.equal(1, x)
            assert.are.equal(2, y)
        end)

        it("should be able to be matched", function()
            local gem = Gem.new({type = "regular", color = "red"})
            assert.is_false(gem:isMatched())
            gem:setMatched(true)
            assert.is_true(gem:isMatched())
        end)

        it("should be able to be selected", function()
            local gem = Gem.new({type = "regular", color = "red"})
            assert.is_false(gem:isSelected())
            gem:setSelected(true)
            assert.is_true(gem:isSelected())
        end)
    end)
end) 